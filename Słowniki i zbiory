ZAD 1
Napisz funkcję is_key(dictionary, key), który zwraca wartość True, 
jeżeli w słowniku dictionary znajduje się klucz key, a False w przeciwnym przypadku.

def is_key(dictionary, key):
    if key in dictionary:
        return True
    else:
        return False


ZAD 2
Napisz program, który najpierw pobiera liczbę naturalną nn, a następnie do słownika wrzuca nn par typu klucz-wartość. 
Następnie program, ma wyświetlić w innym słowniku ilość występowania wartości w pierwszym słowniku.

Sample Input 1:
3
ala kota
ada kota
ama kota
Sample Output 1:
{'kota': 3}

digit = int(input())
slownik ={}
for i in range(digit):
    slowo = input()
    lista = slowo.split()
    slownik[lista[0]] = lista[1]
d = {}
for j in slownik.values():
    if (j not in d):
        d[j] = 1
    else:
        d[j]=d[j]+1
print(d)

ZAD 3
Napisz funkcje merge_dictionaries(d1,d2), której wynikiem będzie słownik postaci d2, a potem d1.

def  merge_dictionaries(d1,d2):
    for key, value in d1.items():
        d2[key]=value
    return d2

ZAD 4
Napisz funkcję map_list(list1, list2), której wynikiem będzie słownik, w której list1 będą kluczami, a list2 wartościami tego słownika.

def map_list(list1, list2):
    slownik={}
    for i in range(len(list1)):
        slownik[list1[i]] = list2[i]
    return slownik
    
ZAD 5
Napisz funkcję unique_dictionary(dictionary), która usuwa wszystkie duplikaty wartości ze słownika i zwraca ten słownik.

def unique_dictionary(dictionary):
    d={}
    for key, value in dictionary.items():
        if value not in d.values():
            d[key]=value
    return d
    
ZAD 6
Napisz program, który pobierze liczbę naturalną nn, następnie nn słów do zbioru, a następnie wyświetli ten zbiór na ekranie posortowane.

Należy skorzystać z funkcji sorted() na zbiorze.

Sample Input 1:
4
ala
ala
ala
ala
Sample Output 1:
['ala'] 

setWords = set()
digit = int(input())
for i in range(digit):
    words = input().split()
    setWords.update(words)
print(sorted(setWords))

ZAD 7
Napisz program, który pobierze od użytkownika 4 zbiory liczb całkowitych (każdy w osobnej linii) A,B,C,DA,B,C,D, a następnie wykona następujące działania (każdy wynik w osobnej linii):

A | ( B & C) ^ D
A ^ B ^ C ^ D
A - B | B - A
D - A & A - D
Sample Input:
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
Sample Output:
{1, 2, 3, 4, 13, 14, 15, 16}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}
{1, 2, 3, 4, 5, 6, 7, 8}
set()


A = set()
B = set()
C = set()
D = set()

A1 = list(map(int,input().split()))
B1 = list(map(int,input().split()))
C1 = list(map(int,input().split()))
D1 = list(map(int,input().split()))

A.update(A1)
B.update(B1)
C.update(C1)
D.update(D1)

print(A | (B & C) ^ D)
print(A ^ B ^ C ^ D)
print(A - B | B - A)
print(D - A & A - D)

ZAD 7
Napisz program, który pobierze od użytkownika słownik, a następnie wyświetli ten słownik na ekranie.
Wskazówka: Należy skorzystać z modułu ast oraz jej metody literal_eval.

Sample Input:
{'key0': 5, 'key1': 4, 'key2': 6, 'key3': 9, 'key4': 1, 'key5': 3, 'key6': 5, 'key7': 2, 'key8': 6, 'key9': 3}
Sample Output:
{'key0': 5, 'key1': 4, 'key2': 6, 'key3': 9, 'key4': 1, 'key5': 3, 'key6': 5, 'key7': 2, 'key8': 6, 'key9': 3}
    
 import ast
d = ast.literal_eval(input())
print(d)

ZAD 8
Napisz program, który pobierze od użytkownika słownik, a następnie wyświetli ten słownik posortowany po jego wartościach.

Sample Input:
{'key0': 5, 'key1': 4, 'key2': 6, 'key3': 9, 'key4': 1, 'key5': 3, 'key6': 5, 'key7': 2, 'key8': 6, 'key9': 3}
Sample Output:
{'key4': 1, 'key7': 2, 'key5': 3, 'key9': 3, 'key1': 4, 'key0': 5, 'key6': 5, 'key2': 6, 'key8': 6, 'key3': 9}

import ast
d = ast.literal_eval(input())
a = sorted(d.items(), key=lambda x: x[1])
d1 = {}
for i in range(len(a)):
    d1[a[i][0]]=a[i][1]
print(d1)

ZAD 8
Napisz program, który wczyta od użytkownika słownik oraz liczbę nn. Wynikiem działania programu ma być wyświetlenie posortowanego słownika po wartościach, w którym wartości te są większe bądź równe liczbie nn.

Sample Input:
{'key0': 378, 'key1': 392, 'key2': 419, 'key3': 92, 'key4': 860, 'key5': 70, 'key6': 13, 'key7': 819, 'key8': 234, 'key9': 245}
234
Sample Output:
{'key8': 234, 'key9': 245, 'key0': 378, 'key1': 392, 'key2': 419, 'key7': 819, 'key4': 860}

import ast
d2 = ast.literal_eval(input())
d = {}
n = int(input())
for key, value in d2.items():
    type(value)
    if value>=n:
        d[key]=value
a = sorted(d.items(), key=lambda x: x[1])
d1 = {}
for i in range(len(a)):
    d1[a[i][0]]=a[i][1]
print(d1)
