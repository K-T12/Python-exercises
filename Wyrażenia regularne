ZAD 1
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wypisze wartość True, jeżeli ciąg ten składa się wyłącznie z liter i cyfr lub False w przeciwnym przypadku.

Sample Input:
ABCDEFabcdef123450
Sample Output:
True

import re
text = input()
pattern = '^[A-Za-z0-9]*$'
if re.search(pattern, text):
    print('True')
else:
    print('False')

ZAD 2
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wypisze wartość True, jeżeli ciąg ten składa się wyłącznie z litery a, a następnie zero lub więcej wystąpień litery b, a na końcu dowolny znak lub False w przeciwnym przypadku.

Sample Input:
ac
Sample Output:
True

import re
text = input()
pattern = r'^a+b*.$'
if re.search(pattern, text):
    print('True')
else:
    print('False')

ZAD 3
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wypisze wartość True, 
jeżeli ciąg ten składa się na początku z conajmniej jednej małej litery, potem znaku podkreślenie oraz zakończy się conajmniej jedną małą literą w dowolnym miejscu tego ciągu lub False w przeciwnym przypadku.

Sample Input:
aab_cbbbc
Sample Output:
True

import re
text = input()
pattern = '^[a-z]+_.*[a-z]+$'
if re.search(pattern, text):
    print('True')
else:
    print('False')
    
ZAD 4
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wypisze wartość True, jeżeli ciąg ten na końcu wiersza posiada słowo plus ewentualnie znak interpunkcyjny lub False w przeciwnym przypadku.

Sample Input:
The quick brown fox jumps over the lazy dog.
Sample Output:
True

import re
text1 = input()
pattern = r'.*\D$|.*\D\S$'
if re.search(pattern, text1, re.MULTILINE):
   print('True')
else:
    print('False')

ZAD 5
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wypisze wartość True, jeżeli ciąg ten składa się z cyfry na końcu tego słowa lub False w przeciwnym przypadku.

Sample Input:
abcdef6
Sample Output:
True

import re
text1 = input()
pattern = '\d$'
if re.search(pattern, text1):
   print('True')
else:
    print('False')

ZAD 6
Napisz program, który pobierze dwa ciągi tekstowe od użytkownika: tekst, oraz szukane słowa.
Wynikiem programu ma być odpowiedź TAK, jeżeli słowo znajduje się w tekście lub NIE w przeciwnym przypadku.

Sample Input:
The quick brown fox jumps over the lazy dog.
fox dog horse
Sample Output:
TAK TAK NIE

text1 = input()
searched_words = input().split()
for i in range(len(searched_words)):
    if searched_words[i] in text1:
        print('TAK', end=' ')
    else:
        print('NIE', end=' ')

ZAD 7
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wzorzec.
Wynikiem programu ma być ilość odnalezionych wzorców w tekście.

Sample Input:
Python exercises PHP exercises C# exercises
exercises
Sample Output:
3

import re
text = input()
pattern = input()
results = re.findall(pattern, text)
print(len(results))

ZAD 8
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wypisze wyłącznie cyfry z tego ciągu.

Sample Input:
Ten 10, Twenty 20, Thirty 30
Sample Output:
10
20
30

import re
text = input()
pattern = r'[0-9]+'
match = re.findall(pattern, text)
if match:
    print(*match, sep="\n")
    
ZAD 9    
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wypisze wszystkie trzy, cztero oraz pięcioliterowe słowa z tego ciągu.

Sample Input:
The quick brown fox jumps over the lazy dog.
Sample Output:
['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']

import re
text = input()
pattern = r'\b[a-zA-Z]{3}\b|\b[a-zA-Z]{4}\b|\b[a-zA-Z]{5}\b'
match = re.findall(pattern, text)
print(match)

ZAD 10
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wypisze wszystkie linki z tego ciągu.

Sample Input:
<p>Contents :</p><a href="https://w3resource.com">Python Examples</a><a href="http://github.com">Even More Examples</a>
Sample Output:
['https://w3resource.com', 'http://github.com'] 

import re
text = input()
pattern = r'https://\w*\.[a-z]+\.?[a-z]*\.?[a-z]*|http://\w*\.[a-z]+\.?[a-z]*\.?[a-z]*'
match = re.findall(pattern, text)
print(match)

ZAD 11
Napisz program, który pobierze ciąg tekstowy od użytkownika, a następnie wypisze wartość True, jeżeli ciąg ten jest liczbą zmiennoprzecinkową do dwóch miejsc po przecinku lub False w przeciwnym przypadku.

Sample Input:
123.11
Sample Output:
True

import re
text = input()
pattern = r'\d+\.\b[0-9]{1}\b|\d+\.\b[0-9]{2}\b'
match = re.search(pattern, text)
if match:
    print('True')
else:
    print('False')

----------------------------------------------------------------------------------
ZAD 
Napisz program, który pobierze liczby od użytkownika, a następnie wypisze jej wartość jako obiekt klasy ndarray.
Skorzystaj z pakietu NumPy

Sample Input:
1 2 3 4 5
Sample Output:
[1 2 3 4 5]

ZAD
Napisz program, który pobierze liczby od użytkownika do dwóch tablic ndarray, a następnie wypisze wartość True/False porównując elementy tych tablic w kontekście operatora >.
Skorzystaj z pakietu NumPy

Sample Input:
3 5
2 5
Sample Output:
[ True False]

ZAD
Napisz program, który pobierze od użytkownika liczby a i b, gdzie a \times b = na×b=n. Wynikiem ma być tablica dwuwymiarowa klasy ndarray o wymiarach a i b wypełniona liczbami od zera do a \times ba×b
Skorzystaj z pakietu NumPy

Sample Input:
3 4
Sample Output:
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
 
ZAD
Napisz program, który wczyta jako obiekt typu array (o nazwie table1D) tablicę a następnie wyświetli wartości pierwiastków na tej tablicy na ekranie.

Sample Input:
4 4 4 4 4
Sample Output:
2.0 2.0 2.0 2.0 2.0

ZAD
Napisz program, który wczyta do zmiennej o nazwie table2D tablicę dwuwymiarową, a następnie wyświetli jej transpozycję.

Sample Input:
4
99 83 29 71 51
80 35 87 51 67
92 46 99 81 11
84 49 74 18 69

Sample Output:
99 80 92 84
83 35 46 49
29 87 99 74
71 51 81 18
51 67 11 69

ZAD
Napisz program, który wczyta dane, składające się z krotek, a następnie wyświetli te dane posortowane według drugiego, a potem trzeciego parametru (klasa i wzrost).

Wczytywanie takich danych do obiektu typu array może wyglądać następująco:

import numpy as np
data_type = [('name', 'S15'), ('class', int), ('height', float)]
students_details = [('James', 5, 48.5), ('Nail', 6, 52.5),('Paul', 5, 42.10), ('Pit', 5, 40.11)]
# create a structured array
students = np.array(students_details, dtype=data_type)
...
Należy skorzystać z metody sort i parametru order, który powinien mieć wartość 

Sample Input:
James 5 48.5
Nail 6 52.5
Paul 5 42.10
Pit 5 40.11

Sample Output:
Pit 5 40.11
Paul 5 42.1
James 5 48.5
Nail 6 52.5

ZAD
Napisz program, który pobierze liczby od użytkownika, macierz, a następnie wyświetli tę macierz posortowaną malejąco jako tablicę jednowymiarową.
Skorzystaj z pakietu NumPy

Sample Input:
10 40
30 20

Sample Output:
[40 30 20 10]

ZAD
Napisz program, który pobierze od użytkownika liczbę n, a następnie wyświetli macierz n \times nn×n według poniższego wzoru (patrz odpowiedzi).
Skorzystaj z pakietu NumPy

Sample Input 1:
4
Sample Output 1:
[[0 1 0 1]
 [1 0 1 0]
 [0 1 0 1]
 [1 0 1 0]]
Sample Input 2:
5
Sample Output 2:
[[0 1 0 1 0]
 [1 0 1 0 1]
 [0 1 0 1 0]
 [1 0 1 0 1]
 [0 1 0 1 0]]
 
ZAD
Napisz program, który pobierze od użytkownika macierz, a następnie wypisze indeksy występowania największego elementu w każdym wierszu tej macierzy, zaczynając od pierwszego wiersza.
Skorzystaj z pakietu NumPy

Sample Input:
1 2 3 4
Sample Output:
0 3



