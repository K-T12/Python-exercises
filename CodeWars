Ex 1
Trolls are attacking your comment section!
A common way to deal with this situation is to remove all of the vowels from the trolls' comments, neutralizing the threat.
Your task is to write a function that takes a string and return a new string with all vowels removed.
For example, the string "This website is for losers LOL!" would become "Ths wbst s fr lsrs LL!".


def disemvowel(string):
    import re
    disemvoweled_text = string
    pattern = "(a|e|i|o|u|A|E|I|O|U)+"
    for i in string:
        if re.search(pattern, string):
            disemvoweled_text = re.sub(pattern, "",  disemvoweled_text)
    return disemvoweled_text
    
    
Ex 2
The goal of this exercise is to convert a string to a new string where each character in the new string is "(" 
if that character appears only once in the original string, or ")" 
if that character appears more than once in the original string. 
Ignore capitalization when determining if a character is a duplicate.

"din"      =>  "((("
"recede"   =>  "()()()"
"Success"  =>  ")())())"
"(( @"     =>  "))(("



def duplicate_encode(word):
    word = word.lower()
    word1 = ""
    for i in word:
        if word.count(i)==1:
            word1 =+ "("
        else:
            word1 =+ ")"
    return(word1)
    
Ex3
Write a function that converts decimal to binary.

def count_bits(n):
    m = ""
    while n >= 1:
        if n % 2 == 0:
            n = n // 2
            m = m + "0"
            print(n)
            print(m)
        elif n % 2 != 0:
            n = n // 2
            m = m + "1"
            print(n)
            print(m)
        elif n < 1:
            break
    return m[::-1]



Ex 4
Write a function that takes an integer as input, and returns the number of bits that are equal to 1 in the binary representation of that number. 
You can guarantee that input is non-negative.

Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case

def count_bits(n):
    bindata = format(n, "b")
    m = int()
    for i in bindata:
        if i == "1":
            m += 1
    return m
    

Ex 5
Complete the solution so that it splits the string into pairs of two characters. 
If the string contains an odd number of characters then it should replace the missing second character of the final pair with an underscore ('_').

Examples:

* 'abc' =>  ['ab', 'c_']
* 'abcdef' => ['ab', 'cd', 'ef']

def solution(s):
    import re
    pattern = "[a-zA-Z_]{2}"
    empty = []
    if (len(s))//2 != 0 or len(s) == 1:
        s += "_"
        print(s)
    match = re.findall(pattern, s)
    if s == "":
        return empty
    if match:
        return match
----------------------------------------
ALTERNATIVE:

import re

def solution(s):
    return re.findall('..', s + '_')

-----------------------------------------


Ex 6
You are given an array (which will have a length of at least 3, but could be very large) containing integers. 
The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. 
Write a method that takes the array as an argument and returns this "outlier" N.

Examples
[2, 4, 0, 100, 4, 11, 2602, 36]
Should return: 11 (the only odd number)

[160, 3, 1719, 19, 11, 13, -21]
Should return: 160 (the only even number)


def find_outlier(integers):
    odd = []
    even = []
    for i in integers:
        if i % 2:
            odd.append(i)
        else:
            even.append(i)
    if len(odd) == 1:
        return odd[0]
    else:
        return even[0]
 
 
Ex 7
Write a function that accepts an array of 10 integers (between 0 and 9), that returns a string of those numbers in the form of a phone number.

Example
create_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) # => returns "(123) 456-7890"
The returned format must be correct in order to complete this challenge.

def create_phone_number(n):
    n.insert(0,"(")
    n.insert(4,")")
    n.insert(5," ")
    n.insert(9,"-")

    for i in range(len(n)):
        n[i] = str(n[i])
    return "".join(n)
    
OR
    
def create_phone_number(n):
	return "({}{}{}) {}{}{}-{}{}{}{}".format(*n)


Ex 8
Alice and Bob were on a holiday. Both of them took many pictures of the places they've been, and now they want to show Charlie their entire collection. However, Charlie doesn't like these sessions, since the motif usually repeats. He isn't fond of seeing the Eiffel tower 40 times.
He tells them that he will only sit for the session if they show the same motif at most N times. Luckily, Alice and Bob are able to encode the motif as a number. Can you help them to remove numbers such that their list contains each number only up to N times, without changing the order?

Task
Given a list and a number, create a new list that contains each number of list at most N times, without reordering.
For example if the input number is 2, and the input list is [1,2,3,1,2,1,2,3], you take [1,2,3,1,2], drop the next [1,2] since this would lead to 1 and 2 being in the result 3 times, and then take 3, which leads to [1,2,3,1,2,3].
With list [20,37,20,21] and number 1, the result would be [20,37,21].


def delete_nth(order,max_e):
    order.reverse()
    for i in order:
        if order.count(i) > max_e:
            for k in range(order.count(i) - max_e):
                order.remove(i)
    for i in order:
        if order.count(i) > max_e:
            for k in range(order.count(i) - max_e):
                order.remove(i)
    order.reverse()
    return order
    
  
Ex 9
Write a simple parser that will parse and run Deadfish.

Deadfish has 4 commands, each 1 character long:

i increments the value (initially 0)
d decrements the value
s squares the value
o outputs the value into the return array
Invalid characters should be ignored.

parse("iiisdoso")  ==>  [8, 64]



def parse(data):
    parse_output=[]
    value=0
    for i in data:
        if i=="i":
            value+=1
        if i=="d":
            value-=1
        if i=="s":
            value=value**2
        if i=="o":
            parse_output.append(value)
    return parse_output


Ex 10
Complete the function scramble(str1, str2) that returns true if a portion of str1 characters can be rearranged to match str2, otherwise returns false.

Notes:
Only lower case letters will be used (a-z). No punctuation or digits will be included.

Examples
scramble('rkqodlw', 'world') ==> True
scramble('cedewaraaossoqqyt', 'codewars') ==> True
scramble('katas', 'steak') ==> False


def scramble(s1, s2):
    s1_list=list(s1)
    true_scrable=0
    for i in s2:
        if i in s1_list:
            s1_list.remove(i)
        else:
            true_scrable=1
    if true_scrable==0:
        return True
    else:
        return False
	
Ex 11
Your task is to sort a given string. Each word in the string will contain a single number. This number is the position the word should have in the result.
Note: Numbers can be from 1 to 9. So 1 will be the first word (not 0).
if the input string is empty, return an empty string. The words in the input String will only contain valid consecutive numbers.

Examples
"is2 Thi1s T4est 3a"  -->  "Thi1s is2 3a T4est"

def order(sentence):
    sent = sentence.split()
    sent_final = []
    for number in range(1,10):
        for i in sent:
            if str(number) in i:
                sent_final.append(i)
    return " ".join(sent_final)
    
    
Ex 12
In this kata you are required to, given a string, replace every letter with its position in the alphabet.
If anything in the text isn't a letter, ignore it and don't return it.

Example
alphabet_position("The sunset sets at twelve o' clock.")
Should return "20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11" ( as a string )

def alphabet_position(text):
    text = text.lower()
    text = list(text)
    text_final = []
    for i in text:
        if ord(i)>96 and ord(i)<124:
            number = ord(i)-96
            text_final.append(str(number))
    return " ".join(text_final)

