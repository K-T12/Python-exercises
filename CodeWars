Ex 1
Trolls are attacking your comment section!
A common way to deal with this situation is to remove all of the vowels from the trolls' comments, neutralizing the threat.
Your task is to write a function that takes a string and return a new string with all vowels removed.
For example, the string "This website is for losers LOL!" would become "Ths wbst s fr lsrs LL!".


def disemvowel(string):
    import re
    disemvoweled_text = string
    pattern = "(a|e|i|o|u|A|E|I|O|U)+"
    for i in string:
        if re.search(pattern, string):
            disemvoweled_text = re.sub(pattern, "",  disemvoweled_text)
    return disemvoweled_text
    
    
Ex 2
The goal of this exercise is to convert a string to a new string where each character in the new string is "(" 
if that character appears only once in the original string, or ")" 
if that character appears more than once in the original string. 
Ignore capitalization when determining if a character is a duplicate.

"din"      =>  "((("
"recede"   =>  "()()()"
"Success"  =>  ")())())"
"(( @"     =>  "))(("



def duplicate_encode(word):
    word = word.lower()
    word1 = ""
    for i in word:
        if word.count(i)==1:
            word1 =+ "("
        else:
            word1 =+ ")"
    return(word1)
    
Ex3
Write a function that converts decimal to binary.

def count_bits(n):
    m = ""
    while n >= 1:
        if n % 2 == 0:
            n = n // 2
            m = m + "0"
            print(n)
            print(m)
        elif n % 2 != 0:
            n = n // 2
            m = m + "1"
            print(n)
            print(m)
        elif n < 1:
            break
    return m[::-1]



Ex 4
Write a function that takes an integer as input, and returns the number of bits that are equal to 1 in the binary representation of that number. 
You can guarantee that input is non-negative.

Example: The binary representation of 1234 is 10011010010, so the function should return 5 in this case

def count_bits(n):
    bindata = format(n, "b")
    m = int()
    for i in bindata:
        if i == "1":
            m += 1
    return m
    

Ex 5
Complete the solution so that it splits the string into pairs of two characters. 
If the string contains an odd number of characters then it should replace the missing second character of the final pair with an underscore ('_').

Examples:

* 'abc' =>  ['ab', 'c_']
* 'abcdef' => ['ab', 'cd', 'ef']




